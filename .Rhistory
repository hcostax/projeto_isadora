load(file = here::here("data",
"database.rds")
)
# Restore the object
readRDS(file = here::here("data",
"database.rds")
)
# Restore the object
database <- readRDS(file = here::here("data",
"database.rds")
)
View(database)
inicio <- "2010-01-01"
fim <- "2021-03-01"
data_inicial <- "2010-01-01"
data_final <- "2021-03-01"
date <- seq(as.Date(data_inicial),
as.Date(data_final),
by = "month")
date <- format(date, format="%Y%m")
setwd(here::here("data", "raw_data"))
data_updated <- format(data_atualizada, format="%Y%m")
# usar o o seguinte formato para a data atualizada:
# "ANO-MES-DIA"
data_atualizada <- "2021-04-01"
data_updated <- format(data_atualizada, format="%Y%m")
data_updated
data_updated <- format(as.Date(data_atualizada), format="%Y%m")
data_updated
# Creates a String of the URL Addresses
urls <-
tidyr::expand_grid(data_updated) %>%
glue_data("https://www.bcb.gov.br/Fis/Consorcios/Port/BD/{data_updated}Consorcios.zip")
# Creates a String of the URL Addresses
urls <-
tidyr::expand_grid(data_updated) %>%
glue_data("https://www.bcb.gov.br/Fis/Consorcios/Port/BD/{data_updated}Consorcios.zip")
# Creates Names for the PDF Files
zipfiles_names <-
tidyr::expand_grid(data_updated) %>%
glue_data("bacen-consorcio-{data_updated}.zip")
safe_download <- safely(~ download.file(.x , .y, mode = "wb"))
walk2(urls, zipfiles_names , safe_download)
suppressMessages(library(plyr))
# get all the zip files
zipF <- list.files(path = getwd(), pattern = "*.zip", full.names = TRUE)
zipF
zipfiles_names
paste0(here::here("data",
"raw_data"),"/",
zipfiles_names)
# unzip all your files
ldply(
.data = paste0(here::here("data",
"raw_data"),"/",
zipfiles_names),
.fun = unzip,
exdir = here::here("data",
"raw_data",
"unziped"))
# https://theautomatic.net/2018/07/11/manipulate-files-r/
# With unlink, we can delete the selected files
# we created above with file.create — also
# in just one line of code.
sapply(paste0(here::here("data",
"raw_data",
"unziped"),"/",
date, "Bens_Imoveis_Grupos", ".csv"), unlink)
sapply(paste0(here::here("data",
"raw_data",
"unziped"),"/",
date, "Bens_Moveis_Grupos", ".csv"), unlink)
sapply(paste0(here::here("data",
"raw_data",
"unziped"),"/",
"Significado_dos_campos_e_metricas", ".xlsx"), unlink)
# https://theautomatic.net/2018/07/11/manipulate-files-r/
# With unlink, we can delete the selected files
# we created above with file.create — also
# in just one line of code.
sapply(paste0(here::here("data",
"raw_data",
"unziped"),"/",
data_updated,
"Bens_Imoveis_Grupos", ".csv"), unlink)
sapply(paste0(here::here("data",
"raw_data",
"unziped"),"/",
data_updated,
"Bens_Moveis_Grupos", ".csv"), unlink)
data_atualizada
data_updated
# read the csv files
new_data <- ldply(.data = paste0(here::here("data",
"raw_data",
"unziped"),"/",
data_updated,"Segmentos_Consolidados.csv"),
.fun = read.csv2)
146014+816
new_database <- rbind(database,
new_data)
View(new_database)
Sys.Date()
Sys.Date() - 60
# Save an object to a file
saveRDS(new_database,
file = here::here("data",
"database.rds")
)
# Restore the object
database <- readRDS(file = here::here("data",
"database.rds")
)
suppressMessages(library(lubridate))
suppressMessages(library("pdftools"))
suppressMessages(library("glue"))
suppressMessages(library("tidyverse"))
setwd(here::here("data", "raw_data"))
date <- seq(as.Date("2010-01-01"),
as.Date("2021-03-01"),
by = "month")
date <- format(date, format="%Y%m")
# Creates a String of the URL Addresses
urls <-
tidyr::expand_grid(date) %>%
glue_data("https://www.bcb.gov.br/Fis/Consorcios/Port/BD/{date}Consorcios.zip")
# Creates Names for the PDF Files
zipfiles_names <-
tidyr::expand_grid(date) %>%
glue_data("bacen-consorcio-{date}.zip")
safe_download <- safely(~ download.file(.x , .y, mode = "wb"))
walk2(urls, zipfiles_names , safe_download)
# https://stackoverflow.com/questions/41954183/how-can-i-extract-multiple-zip-files-and-read-those-csvs-in-r/41954523
suppressMessages(library(plyr))
# get all the zip files
zipF <- list.files(path = getwd(), pattern = "*.zip", full.names = TRUE)
# unzip all your files
ldply(
.data = zipF,
.fun = unzip,
exdir = here::here("data",
"raw_data",
"unziped"))
# https://theautomatic.net/2018/07/11/manipulate-files-r/
# With unlink, we can delete the selected files
# we created above with file.create — also
# in just one line of code.
sapply(paste0(here::here("data",
"raw_data",
"unziped"),"/",
date, "Bens_Imoveis_Grupos", ".csv"), unlink)
sapply(paste0(here::here("data",
"raw_data",
"unziped"),"/",
date, "Bens_Moveis_Grupos", ".csv"), unlink)
sapply(paste0(here::here("data",
"raw_data",
"unziped"),"/",
"Significado_dos_campos_e_metricas", ".xlsx"), unlink)
# get the csv files
csv_files <- list.files(
path = here::here("data",
"raw_data",
"unziped"),
pattern = "*.csv")
# read the csv files
my_data <- ldply(.data = paste0(here::here("data",
"raw_data",
"unziped"),"/",
csv_files),
.fun = read.csv2)
# -----------------------------------------------
# http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata
# SAVE
# Save an object to a file
saveRDS(my_data,
file = here::here("data",
"database.rds")
)
# # Restore the object
# database <- readRDS(file = here::here("data",
#                           "database.rds")
#         )
# rodar o script para atualizar
source(here::here("scripts", "atualizar_bd.R"))
# usar o o seguinte formato para a data atualizada:
# "ANO-MES-DIA"
data_atualizada <- "2021-04-01"
# rodar o script para atualizar
source(here::here("scripts", "atualizar_bd.R"))
# limpar o environment
rm(list = ls())
suppressMessages(library("tidyverse"))
# Restore the object
database <- readRDS(file = here::here("data",
"database.rds")
)
names(database)
database$Código_do_segmento
dados <- database %>%
select(X.Nome_da_Administradora, CNPJ_da_Administradora,
Data_base, Código_do_segmento, Taxa_de_administração,
Quantidade_de_cotas_comercializadas_no_mês) %>%
mutate(
Administradora  = X.Nome_da_Administradora,
Codigo_adm      = CNPJ_da_Administradora,
Data            = Data_base,
Codigo_segmento = Código_do_segmento,
Tax_adm         = Taxa_de_administração,
Qtd_cotas       = Quantidade_de_cotas_comercializadas_no_mês
)
View(dados)
dados <- database %>%
select(X.Nome_da_Administradora, CNPJ_da_Administradora,
Data_base, Código_do_segmento, Taxa_de_administração,
Quantidade_de_cotas_comercializadas_no_mês) %>%
mutate(
Administradora  = X.Nome_da_Administradora,
Codigo_adm      = CNPJ_da_Administradora,
Data            = Data_base,
Codigo_segmento = Código_do_segmento,
Tax_adm         = Taxa_de_administração,
Qtd_cotas       = Quantidade_de_cotas_comercializadas_no_mês
) %>%
select(Administradora, Codigo_adm, Data, Codigo_segmento,
Tax_adm, Qtd_cotas)
View(dados)
is.Date(dados$Data)
str(dados)
as.Date(dados$Data)
format(as.Date(dados$Data), format="%Y%m")
format(dados$Data, format="%Y%m")
format(dados$Data, format="%Y-%m")
as.Data(format(dados$Data, format="%Y-%m"))
as.Date(format(dados$Data, format="%Y-%m"))
transform(dados$Data, x = as.Date(as.character(x), "%Y%m%d"))
dados %>%
transform( Data = as.Date(as.character(Data), "%Y%m%d"))
lubridate::ymd(dados$Data) %>% format("%m-%d")
teste <- lubridate::ymd(dados$Data) %>% format("%Y-%m")
teste
tail(teste)
View(teste)
teste
as.Date(dados$Data, origin = "2000-01")
as.Date(dados$Data, origin = "2000-01-01")
as.Date(paste(substr(dados$Data, 1, 4), substr(x, 5, 6), "01", sep = "-"))
as.Date(paste(substr(dados$Data, 1, 4),
substr(dados$Data, 5, 6), "01", sep = "-"))
teste <- as.Date(paste(substr(dados$Data, 1, 4),
substr(dados$Data, 5, 6), "01", sep = "-"))
head(teste)
tail(teste)
dados <- database %>%
select(X.Nome_da_Administradora, CNPJ_da_Administradora,
Data_base, Código_do_segmento, Taxa_de_administração,
Quantidade_de_cotas_comercializadas_no_mês) %>%
mutate(
Administradora  = X.Nome_da_Administradora,
Codigo_adm      = CNPJ_da_Administradora,
Data            = as.Date(paste(substr(Data_base, 1, 4),
substr(Data_base, 5, 6), "01", sep = "-")),
Codigo_segmento = Código_do_segmento,
Tax_adm         = Taxa_de_administração,
Qtd_cotas       = Quantidade_de_cotas_comercializadas_no_mês
) %>%
select(Administradora, Codigo_adm, Data, Codigo_segmento,
Tax_adm, Qtd_cotas)
View(dados)
str(dados)
View(dados)
filter(Codigo_adm == c("776", "42421776")
itau <- dados %>%
filter(Codigo_adm == c("776", "42421776") )
View(itau)
itau_776 <- dados %>%
filter(
Codigo_adm == "776")
itau_42421776 <- dados %>%
filter(
Codigo_adm == "42421776")
itau.s1_776 <- itau_776 %>%
filter(Codigo_segmento == "1")
names(itau.s1_776)
itau.s1_776 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = Qtd_cotas)) +
geom_line(aes(y = Tax_adm))
itau.s1_776 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = Qtd_cotas), color = "blue") +
geom_line(aes(y = Tax_adm), color = "green")
itau.s1_776 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = log(Qtd_cotas)), color = "blue") +
geom_line(aes(y = Tax_adm), color = "green")
itau.s1_776 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = Tax_adm), color = "green", size = 1)
itau.s1_776 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = Qtd_cotas), color = "blue", size = 1)
itau.s1_776 %>%
ggplot(aes(x = Tax_adm, y = Qtd_cotas)) +
geom_line(color = "orange", size = 1)
itau.s1_776 %>%
ggplot(aes(x = Tax_adm, y = Qtd_cotas)) +
geom_point(color = "orange", size = 1)
itau.s1_776 %>%
ggplot(aes(x = Tax_adm, y = Qtd_cotas)) +
geom_point(color = "orange", size = 2)
itau.s1_776 %>%
ggplot(aes(x = Tax_adm, y = Qtd_cotas)) +
geom_point(color = "orange", size = 2) +
geom_smooth(method = lm, se = TRUE)
itau.s1_776 %>%
ggplot(aes(x = Tax_adm/100, y = Qtd_cotas)) +
geom_point(color = "orange", size = 2) +
geom_smooth(method = lm, se = TRUE)
itau.s1_776 %>%
ggplot(aes(x = Tax_adm/100, y = Qtd_cotas)) +
geom_point(color = "orange", size = 2)
itau.s1_776 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = Tax_adm/100), color = "green", size = 1)
itau.s1_776 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = log(Tax_adm)), color = "green", size = 1)
itau.s1_776 %>%
ggplot(aes(x = log(Tax_adm), y = Qtd_cotas)) +
geom_point(color = "orange", size = 2)
itau.s1_776 %>%
ggplot(aes(x = Tax_adm, y = Qtd_cotas)) +
geom_point(color = "orange", size = 2) +
geom_smooth(method = lm, se = TRUE)
# Percorre cada linha e determine se um valor for zero
row_sub = apply(itau.s1_776, 1, function(row) all(row !=0 ))
# Subset
itau.s1_776 <- itau.s1_776[row_sub,]
View(itau.s1_776)
# Percorre cada linha e determine se um valor for zero
row_sub = apply(itau.s1_776, 6, function(row) all(row !=0 ))
itau.s1_776[, colSums(itau.s1_776 != 0) > 0]
itau.s1_776 %>% select_if(colSums(.) != 0)
purrr::discard(~all(is.na(.)))
itau.s1_776[,-(which(colSums(itau.s1_776)==0))]
itau.s1_776[,-(which(colSums(itau.s1_776$Qtd_cotas)==0))]
str(itau.s1_776)
dados <- database %>%
select(X.Nome_da_Administradora, CNPJ_da_Administradora,
Data_base, Código_do_segmento, Taxa_de_administração,
Quantidade_de_cotas_comercializadas_no_mês) %>%
mutate(
Administradora  = X.Nome_da_Administradora,
Codigo_adm      = CNPJ_da_Administradora,
Data            = as.Date(paste(substr(Data_base, 1, 4),
substr(Data_base, 5, 6), "01", sep = "-")),
Codigo_segmento = Código_do_segmento,
Tax_adm         = Taxa_de_administração,
Qtd_cotas       = as.numeric(Quantidade_de_cotas_comercializadas_no_mês)
) %>%
select(Administradora, Codigo_adm, Data, Codigo_segmento,
Tax_adm, Qtd_cotas)
itau_776 <- dados %>%
filter(
Codigo_adm == "776")
itau_42421776 <- dados %>%
filter(
Codigo_adm == "42421776")
itau.s1_776 <- itau_776 %>%
filter(Codigo_segmento == "1")
itau.s1_776[,-(which(colSums(itau.s1_776$Qtd_cotas)==0))]
##Go through each row and determine if a value is zero
row_sub = apply(itau.s1_776, 1, function(row) all(row !=0 ))
##Subset as usual
itau.s1_776 <- itau.s1_776[row_sub,]
View(itau.s1_776)
View(itau.s1_776)
itau.s1_776[itau.s1_776==0] <- NA
View(itau.s1_776)
itau.s1_776 %>% drop_na()
itau.s1_776 <- itau.s1_776 %>% drop_na()
View(itau.s1_776)
itau.s1_776 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = Qtd_cotas), color = "blue", size = 1)
itau.s1_776 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = Tax_adm), color = "green", size = 1)
itau.s1_776 %>%
ggplot(aes(x = Tax_adm, y = Qtd_cotas)) +
geom_point(color = "orange", size = 2)
itau.s1_776 %>%
ggplot(aes(x = Tax_adm, y = Qtd_cotas)) +
geom_point(color = "orange", size = 2) +
geom_smooth(method = lm, se = TRUE)
modelo_1 <- lm(Qtd_cotas ~ Tax_adm, data = itau.s1_776)
summary(modelo_1)
modelo_2 <- lm(Qtd_cotas ~ lo(Tax_adm), data = itau.s1_776)
summary(modelo_2)
modelo_2 <- lm(Qtd_cotas ~ log(Tax_adm), data = itau.s1_776)
summary(modelo_2)
modelo_3 <- lm(log(Qtd_cotas) ~ Tax_adm, data = itau.s1_776)
summary(modelo_3)
modelo_3 <- lm(log(Qtd_cotas) ~ log(Tax_adm), data = itau.s1_776)
summary(modelo_3)
modelo_4 <- lm(Qtd_cotas ~ 0 + Tax_adm, data = itau.s1_776)
summary(modelo_4)
modelo_5 <- lm(Qtd_cotas ~ 0 + log(Tax_adm), data = itau.s1_776)
summary(modelo_4)
modelo_6 <- lm(log(Qtd_cotas) ~ 0 + log(Tax_adm), data = itau.s1_776)
summary(modelo_4)
summary(modelo_5)
modelo_6 <- lm(log(Qtd_cotas) ~ 0 + log(Tax_adm), data = itau.s1_776)
summary(modelo_6)
itau.s1_776 %>%
ggplot(aes(x = Qtd_cotas)) +
geom_histogram(alpha = 0.45,
fill = "cornflowerblue")
itau.s1_776 %>%
ggplot(aes(x = Tax_adm)) +
geom_histogram(alpha = 0.45,
fill = "cornflowerblue")
itau.s1_776 %>%
ggplot(aes(x = log(Tax_adm))) +
geom_histogram(alpha = 0.45,
fill = "cornflowerblue")
itau.s1_776 %>%
ggplot(aes(x = Tax_adm)) +
geom_histogram(alpha = 0.45,
fill = "cornflowerblue")
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_4$residuals)
8.888^-06
8.888^(-06)
options(scipen = 9999)
8.888^(-06)
8.888^-06
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_4$residuals)
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_5$residuals)
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_6$residuals)
plot(modelo_4, which = c(1:4), pch = 20)
# Análise de Resíduos
par(mfrow = c(2,2))
plot(modelo_4, which = c(1:4), pch = 20)
plot(modelo_5, which = c(1:4), pch = 20)
plot(modelo_6, which = c(1:4), pch = 20)
bartlett.test(data = itau.s1_776, Qtd_cotas~Tax_adm)
summary(modelo_6)
View(itau.s1_776)
df <- itau.s1_776 %>%
select(Tax_adm, Qtd_cotas)
View(itau.s1_776)
cor(itau.s1_776[,5:6])
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_1$residuals)
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_2$residuals)
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_3$residuals)
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_4$residuals)
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_5$residuals)
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_6$residuals)
itau.s1_776 %>%
ggplot(aes(x = Tax_adm, y = Qtd_cotas)) +
geom_point(color = "orange", size = 2) +
geom_smooth(method = lm, se = TRUE)
summary(modelo_6)
modelo_7 <- lm(log(Tax_adm) ~ 0 + log(Qtd_cotas), data = itau.s1_776)
summary(modelo_7)
modelo_7 <- lm(log(Tax_adm) ~  log(Qtd_cotas), data = itau.s1_776)
summary(modelo_7)
modelo_7 <- lm(log(Tax_adm) ~  Qtd_cotas, data = itau.s1_776)
summary(modelo_7)
modelo_7 <- lm(Tax_adm ~  log(Qtd_cotas), data = itau.s1_776)
summary(modelo_7)
modelo_7 <- lm(Tax_adm ~  0 + log(Qtd_cotas), data = itau.s1_776)
summary(modelo_7)
summary(modelo_6)
modelo_7 <- lm(log(Tax_adm) ~ 0 + log(Qtd_cotas), data = itau.s1_776)
summary(modelo_7)
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_t$residuals)
# Teste de Shapiro-Wilk para normalidade
shapiro.test(modelo_7$residuals)
plot(modelo_7, which = c(1:4), pch = 20)
# Análise de Resíduos
par(mfrow = c(2,2))
plot(modelo_7, which = c(1:4), pch = 20)
# rodar os modelos
source(here::here("scripts", "mqo_itau.R"))
# rodar os modelos
source(here::here("scripts", "mqo_itau.R"))
# rodar os modelos
source(here::here("scripts", "mqo_itau.R"), encoding = "UTF-8")
# Load the packages
library(ReporteRs)
write.csv(summary(modelo_6), "tidy_lmfit.csv")
library(officer)
install.packages(c("officer", "flextable"))
setwd(here::here())
rmarkdown::render(here::here("scripts", "report_mqo_itau.Rmd"), 'pdf_document')
rmarkdown::render(here::here("scripts", "report_mqo_itau.Rmd"), 'html_document')
rmarkdown::render(here::here("scripts", "report_mqo_itau.Rmd"), 'html_document')
rmarkdown::render(here::here("outputs", "report_mqo_itau.Rmd"), 'html_document')
browseURL(here::here("outputs", "report_mqo_itau.html"))
